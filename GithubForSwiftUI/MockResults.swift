///
/// @Generated by Mockolo
///



import Foundation


class SearchUserStateProtocolMock: SearchUserStateProtocol {
    init() { }
    init(keyWord: String = "", items: [SearchUserDetailState] = [SearchUserDetailState]()) {
        self.keyWord = keyWord
        self.items = items
    }


    private(set) var keyWordSetCallCount = 0
    var keyWord: String = "" { didSet { keyWordSetCallCount += 1 } }

    private(set) var itemsSetCallCount = 0
    var items: [SearchUserDetailState] = [SearchUserDetailState]() { didSet { itemsSetCallCount += 1 } }
}

class UserDetailStateProtocolMock: UserDetailStateProtocol {
    init() { }
    init(userName: String = "", header: UserDetailHeaderState, repositoryList: UserDetailRepositoryListState) {
        self.userName = userName
        self._header = header
        self._repositoryList = repositoryList
    }


    private(set) var userNameSetCallCount = 0
    var userName: String = "" { didSet { userNameSetCallCount += 1 } }

    private(set) var headerSetCallCount = 0
    private var _header: UserDetailHeaderState!  { didSet { headerSetCallCount += 1 } }
    var header: UserDetailHeaderState {
        get { return _header }
        set { _header = newValue }
    }

    private(set) var repositoryListSetCallCount = 0
    private var _repositoryList: UserDetailRepositoryListState!  { didSet { repositoryListSetCallCount += 1 } }
    var repositoryList: UserDetailRepositoryListState {
        get { return _repositoryList }
        set { _repositoryList = newValue }
    }
}

class SearchUserRepositoryMock: SearchUserRepository {
    init() { }


    private(set) var fetchUserListCallCount = 0
    var fetchUserListHandler: ((String) async throws -> ([SearchUserDetailState]))?
    func fetchUserList(query: String) async throws -> [SearchUserDetailState] {
        fetchUserListCallCount += 1
        if let fetchUserListHandler = fetchUserListHandler {
            return try await fetchUserListHandler(query)
        }
        return [SearchUserDetailState]()
    }
}

class UserDetailRepositoryMock: UserDetailRepository {
    init() { }


    private(set) var fetchUserCallCount = 0
    var fetchUserHandler: ((String) async throws -> (UserDetailHeaderState))?
    func fetchUser(with name: String) async throws -> UserDetailHeaderState {
        fetchUserCallCount += 1
        if let fetchUserHandler = fetchUserHandler {
            return try await fetchUserHandler(name)
        }
        fatalError("fetchUserHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var fetchRepositoryCallCount = 0
    var fetchRepositoryHandler: ((String) async throws -> (UserDetailRepositoryListState))?
    func fetchRepository(with name: String) async throws -> UserDetailRepositoryListState {
        fetchRepositoryCallCount += 1
        if let fetchRepositoryHandler = fetchRepositoryHandler {
            return try await fetchRepositoryHandler(name)
        }
        fatalError("fetchRepositoryHandler returns can't have a default value thus its handler must be set")
    }
}

class SearchUserDetailStateProtocolMock: SearchUserDetailStateProtocol {
    init() { }
    init(id: String = "", name: String = "", profileImage: URL? = nil) {
        self.id = id
        self.name = name
        self.profileImage = profileImage
    }


    private(set) var idSetCallCount = 0
    var id: String = "" { didSet { idSetCallCount += 1 } }

    private(set) var nameSetCallCount = 0
    var name: String = "" { didSet { nameSetCallCount += 1 } }

    private(set) var profileImageSetCallCount = 0
    var profileImage: URL? = nil { didSet { profileImageSetCallCount += 1 } }
}

class UserDetailHeaderStateProtocolMock: UserDetailHeaderStateProtocol {
    init() { }
    init(id: String = "", name: String = "", profileImage: URL? = nil, followers: Int = 0, following: Int = 0) {
        self.id = id
        self.name = name
        self.profileImage = profileImage
        self.followers = followers
        self.following = following
    }


    private(set) var idSetCallCount = 0
    var id: String = "" { didSet { idSetCallCount += 1 } }

    private(set) var nameSetCallCount = 0
    var name: String = "" { didSet { nameSetCallCount += 1 } }

    private(set) var profileImageSetCallCount = 0
    var profileImage: URL? = nil { didSet { profileImageSetCallCount += 1 } }

    private(set) var followersSetCallCount = 0
    var followers: Int = 0 { didSet { followersSetCallCount += 1 } }

    private(set) var followingSetCallCount = 0
    var following: Int = 0 { didSet { followingSetCallCount += 1 } }
}

class UserDetailRepositoryListStateProtocolMock: UserDetailRepositoryListStateProtocol {
    init() { }
    init(items: [UserDetailRepositoryDetailState] = [UserDetailRepositoryDetailState]()) {
        self.items = items
    }


    private(set) var itemsSetCallCount = 0
    var items: [UserDetailRepositoryDetailState] = [UserDetailRepositoryDetailState]() { didSet { itemsSetCallCount += 1 } }
}

class UserDetailRepositoryDetailStateProtocolMock: UserDetailRepositoryDetailStateProtocol {
    init() { }
    init(id: String = "", name: String = "", fullName: String = "", description: String? = nil, url: URL? = nil, fork: Bool = false) {
        self.id = id
        self.name = name
        self.fullName = fullName
        self.description = description
        self.url = url
        self.fork = fork
    }


    private(set) var idSetCallCount = 0
    var id: String = "" { didSet { idSetCallCount += 1 } }

    private(set) var nameSetCallCount = 0
    var name: String = "" { didSet { nameSetCallCount += 1 } }

    private(set) var fullNameSetCallCount = 0
    var fullName: String = "" { didSet { fullNameSetCallCount += 1 } }

    private(set) var descriptionSetCallCount = 0
    var description: String? = nil { didSet { descriptionSetCallCount += 1 } }

    private(set) var urlSetCallCount = 0
    var url: URL? = nil { didSet { urlSetCallCount += 1 } }

    private(set) var forkSetCallCount = 0
    var fork: Bool = false { didSet { forkSetCallCount += 1 } }
}

